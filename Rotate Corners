/*
In this kata, you must write a function that expects a two-dimensional list matrix (minimum size: 2 x 2) as the only argument. The return value will be a two-dimensional list (size: 2 x 2) showing only the corners after n clockwise rotations.

Examples of corner values, rotation and corners-only return value: invalid as a kata test case, demonstration only!

# corners = 1, 2, 3, 4
# non-corners = 0
[[1, 0, 2],
 [0, 0, 0],
 [4, 0, 3]]

# above 2D list after a single clockwise rotation
[[4, 0, 1],
 [0, 0, 0],
 [3, 0, 2]]

# return value of above 2D list showing only the corners
[[4, 1],
 [3, 2]]
The total number of clockwise rotations, n, is equal to the sum of all corner values multiplied by the sum of all non-corner values.

Values in matrix are ASCII characters, booleans or integers. Use the integer values when determining the corner/non-corner sums.

In the case of ASCII characters, use the corresponding ASCII value. A == 65, Z == 90, etc
In the case of booleans, use the corresponding integer value. True/true == 1, False/false == 0
matrix will always be a two-dimensional list (minimum size: 2 x 2)

If the initial size of matrix is 2 x 2, no rotation is needed.
*/
function rotateCorners(m) {
var mas = [];
var c = [[],[]];
var i;
var j;
var sn=0;
var sc=0

c[0][0]=m[0][0];
c[0][1]=m[0][m[0].length-1];
c[1][0]=m[m.length-1][0];
c[1][1]=m[m.length-1][m[0].length-1];

for (i=0; i<m.length;  i++){
    for (j=0; j<m[0].length; j++){
      
      if (typeof(m[i][j])==="string")
        m[i][j]=m[i][j].charCodeAt(0)-32;
      
      if (typeof(m[i][j])==="boolean")
         switch (m[i][j]) {
         case true:   m[i][j]=1; break;
         case false:   m[i][j]=0; break;
         }
      if (i>0&&i<m.length-1 || j>0&&j<m[0].length-1)
         sn+=m[i][j]; 
      }   

} 
var sc=m[0][0]+m[0][m[0].length-1]+m[m.length-1][0]+m[m.length-1][m[0].length-1];
var sum=4*Number('0.' + String(sc*sn/4).split('.')[1]);

for(k=0; k<sum; k++){
   mas = [];
   for (i = c.length - 1; i >= 0; i--) {
       for (j = 0; j < c[i].length; j++) {
        if (!mas[j]) {
        mas[j] = [];
        }
        mas[j].push(c[i][j]);
        }
   }
 c=mas;
}
console.log(c); 
return c;
}
